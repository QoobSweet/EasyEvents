{"version":3,"file":"serverApi.js","sourceRoot":"","sources":["../../src/api/serverApi.ts"],"names":[],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport \"@firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport rxUsers from './rxUsers';\r\nimport rxClients from './rxClients';\r\nimport rxInquiries from './rxInquiries';\r\nimport { DbDoc } from \"../definitions/dbDoc\";\r\nimport { Observable } from \"rxjs\";\r\nimport { UserI } from \"../definitions/definitions\";\r\n\r\nexport interface ServerApi {\r\n    rxUsers: Observable<unknown[]>;\r\n    rxClients: Observable<unknown[]>;\r\n    rxInquiries: Observable<unknown[]>;\r\n    firestore: firebase.firestore.Firestore;\r\n    getApiKey: { (): string };\r\n    getConfig: { (callback: {(config: Object): void}): void };\r\n    setFieldValue: { (collectionKey: string, docKey: string, fieldKey: string, fieldValue: unknown): void };\r\n    removeDoc: { (user: UserI, collectionKey: string, docKey: string): void };\r\n    createDoc: { (user: UserI, collectionKey: string, doc: DbDoc, callback: Function): void };\r\n}\r\n\r\ninterface FirebaseConfig {\r\n    apiKey: string;\r\n    authDomain: string;\r\n    databaseURL: string;\r\n    projectId: string;\r\n    storageBucket: string;\r\n    messagingSenderId: string;\r\n    appId: string;\r\n}\r\n\r\nconst firebaseConfig: FirebaseConfig = {\r\n    apiKey: \"AIzaSyCW7Hj3REjJfdct86iEOx4De5KHXnH75Z4\",\r\n    authDomain: \"quick-events-f2dab.firebaseapp.com\",\r\n    databaseURL: \"https://quick-events-f2dab.firebaseio.com\",\r\n    projectId: \"quick-events-f2dab\",\r\n    storageBucket: \"quick-events-f2dab.appspot.com\",\r\n    messagingSenderId: \"492433473730\",\r\n    appId: \"1:492433473730:web:4bbc0e64f5b15de90d7b5b\"\r\n};\r\n\r\nconst ServerApi = (): ServerApi => {\r\n    //add flexibility to retrieve our firebase instance no matter when/how ServerApi is created.\r\n    const loadedFirebase = firebase.apps.length ? firebase.app() : firebase.initializeApp(firebaseConfig);\r\n    const firestore = loadedFirebase.firestore();\r\n    \r\n    return {\r\n        rxUsers: rxUsers,\r\n        rxClients: rxClients,\r\n        rxInquiries: rxInquiries,\r\n\r\n        firestore: firestore,\r\n\r\n        getApiKey: (): string => { return firebaseConfig.apiKey; },\r\n        getConfig: (): FirebaseConfig => { return firebaseConfig; },\r\n\r\n        setFieldValue: (collectionKey, docKey, fieldKey, fieldValue) => {\r\n                //check for bindedData\r\n            if(fieldKey !== 'id'){\r\n                firestore.collection(collectionKey)\r\n                .doc(docKey)\r\n                .set({\r\n                [fieldKey]: fieldValue\r\n                }, {merge: true});\r\n            }\r\n        },\r\n\r\n        removeDoc: (user, collectionKey, docKey) => { \r\n            console.log('removing Doc')\r\n\r\n            //remove root client\r\n            firestore.collection(collectionKey).doc(docKey).delete();\r\n        \r\n            //remove association to user\r\n            let asocArray: string[] = [];\r\n        \r\n            if(user && user[collectionKey]){\r\n              asocArray = user[collectionKey] as string[];\r\n            }\r\n            asocArray = asocArray.filter(e => e !== docKey);\r\n        \r\n            firestore.collection('users')\r\n              .doc(user.id)\r\n              .set({\r\n                [collectionKey]: asocArray\r\n              }, { merge: true });\r\n        },\r\n\r\n        createDoc: (user, collectionKey, doc, callback) => {\r\n            if(doc){\r\n                callback(new Promise((resolve) =>{\r\n                    const docRef = firestore.collection(collectionKey).doc();\r\n                    docRef.set(doc);\r\n            \r\n                    //create association to user\r\n                    const asocArray = user[collectionKey] ? user[collectionKey] as string[] : [];\r\n                    asocArray.push(docRef.id);\r\n            \r\n                    firestore.collection('users')\r\n                    .doc(user.id)\r\n                    .set({\r\n                        [collectionKey]: asocArray\r\n                    }, {merge: true})\r\n                    \r\n                    resolve(docRef);\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default ServerApi;"]}