{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../../src/definitions/definitions.ts"],"names":[],"mappings":"AAwEA,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAW,EAAE,EAAE;IACzC,MAAM,IAAI,GAAW,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACjD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,EAAE;IAC3C,MAAM,IAAI,GAAW,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAA","sourcesContent":["import { ServerApi } from \"../api/serverApi\";\r\nimport Coorespondence from \"./coorespondence\";\r\nimport { DbDoc } from \"./dbDoc\";\r\n\r\nexport interface DbDocI {\r\n  [key: string]: AccessData | number | string | string[] | Function | Message[];\r\n  \r\n  /**Label Used in internal console logs */\r\n  identifierLabel: string;\r\n  /** collection key for mapping root database */\r\n  collectionKey: string;\r\n  /**db doc key. If not set, <docTemplate>.init needs to be called unless empty template is needed */\r\n  id: string;\r\n\r\n  /** checks object id, if invalid creates new entry in database and applies return id for identification\r\n  * @returns id of new entry\r\n  */\r\n  init: (user: UserI, serverApi: ServerApi, callback?: Function) => void;\r\n  /**\r\n   * returns rawObject in form of dbDocTemplate\r\n   * maps all values even if not referenced by declared doc\r\n   * @param dataObj should only ever be a raw data Object matching the type of doc you are creating.\r\n   * @example if Inquiry Object is Passed into Client mergeModel the id's and keys would conflict and not work with ongoing functions.\r\n   */\r\n  mergeModel: (dataObj?: DbDoc) => void;\r\n  /** Returns Developer designated Fields for display in Object format */\r\n  accessibleFields: () => AccessData[];\r\n  lockedFields: string[];\r\n  /** Updates specific field of document in db if initiated */\r\n  updateField: (serverApi: ServerApi, key: string, value: unknown) => void;\r\n  /** \r\n   * Good practice to implement confirmation prompt\r\n   * removes doc from database. model logic must take place in template before this is called.\r\n   */\r\n  remove: (user: UserI, serverApi: ServerApi) => boolean;\r\n}\r\n\r\nexport interface UserI extends DbDocI {\r\n  name: AccessData;\r\n  email: AccessData;\r\n  phone: AccessData;\r\n}\r\n\r\nexport interface ClientI extends DbDocI {\r\n  name: AccessData;\r\n  email: AccessData;\r\n  phone: AccessData;\r\n}\r\n\r\n\r\nexport interface AccessData {\r\n  label: string;\r\n  value: string | {} | Coorespondence;\r\n  type: \"number\" | \"color\" | \"text\" |\r\n  \"search\" | \"tel\" | \"url\" | \"email\" |\r\n  \"password\" | \"date\" | \"month\" |\r\n  \"week\" | \"time\" | \"datetime-local\" | \"select\" | \"coorespondence\";\r\n  options?: string[] | null;\r\n  positionIndex: Number;\r\n}\r\n\r\nexport interface FormItem {\r\n  label: string;\r\n  data: AccessData;\r\n}\r\n\r\nexport interface Message {\r\n  date: string;\r\n  username: string;\r\n  message: string;\r\n}\r\n\r\nexport const compressKey = (key: string) => {\r\n  const _key: string = key.replace(' ', '').trim();\r\n  return _key.charAt(0).toLowerCase() + _key.slice(1);\r\n}\r\n\r\nexport const decompressKey = (key: string) => {\r\n  const _key: string = key.replace(/([A-Z])/g, ' $1').trim();\r\n  return (_key.charAt(0).toUpperCase() + _key.slice(1));\r\n}"]}